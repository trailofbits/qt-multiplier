#
# Copyright (c) 2023-present, Trail of Bits, Inc.
# All rights reserved.
#
# This source code is licensed in accordance with the terms specified in
# the LICENSE file found in the root directory of this source tree.
#

name: Posix

on:
  workflow_call:
    inputs:
      platform:
        required: true
        type: string

      build_type:
        required: true
        type: string

      cxx_common_tag:
        required: true
        type: string

jobs:
  build:
    runs-on: ${{ inputs.platform }}

    env:
      CACHE_KEY: platform-${{ inputs.platform }}_type-${{ inputs.build_type }}_cxxcommon-${{ inputs.cxx_common_tag }}

    steps:
      - name: Clone the source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Initialize the submodules
        run: |
          eval $(ssh-agent -s)
          ssh-add - <<< '${{ secrets.MX_MULTIPLIER_DEPLOY_KEY }}'

          git submodule update --init --recursive

      - name: Set the CCACHE_DIR environment variable
        run: |
          echo "CCACHE_DIR=${{ github.workspace }}/ccache" >> $GITHUB_ENV

      - name: Update the ccache cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache_${{ env.CACHE_KEY }}-${{ github.sha }}
          restore-keys: ccache_${{ env.CACHE_KEY }}

      - name: Create the ccache folder
        run: |
          mkdir -p \
            "${CCACHE_DIR}"

      - name: Install system dependencies
        run: |
          if [[ "$OSTYPE" == "darwin"* ]]; then
            sudo chown -R $(whoami) $(brew --prefix)/*

            brew install \
              ccache \
              cmake \
              flex \
              bison \
              qt@6 \
              curl

            brew unlink qt@6
            brew link qt@6

          else
            sudo apt update

            sudo apt install -y \
              clang \
              ccache \
              cmake \
              flex \
              bison \
              qt6-base-dev \
              libqt6core5compat6-dev \
              libgl1-mesa-dev \
              libglvnd-dev \
              cbindgen
          fi

      - name: Install cxx-common
        run: |
          # Note the ubuntu link has been changed since v4.0.0
          if [[ "$OSTYPE" == "darwin"* ]]; then
            folder_name="vcpkg_macos-12_llvm-16-pasta_xcode-14.2_amd64"
          else
            folder_name="vcpkg_ubuntu-v2-22.04_llvm-16-pasta_amd64"
          fi

          archive_name="${folder_name}.tar.xz"
          cxx_common_url="https://github.com/lifting-bits/cxx-common/releases/download/${{ inputs.cxx_common_tag }}/${archive_name}"

          curl \
            -L \
            "${cxx_common_url}" \
            -o \
            "${archive_name}"

          tar xf \
            "${archive_name}"

          rm "${archive_name}"

          echo "VCPKG_ROOT=$(pwd)/${folder_name}" >> $GITHUB_ENV

      - name: Setup the build folders for the vendored libraries
        run: |
          mkdir build_vendored

          mkdir multiplier_install
          echo "MULTIPLIER_INSTALL_DIRECTORY=$(pwd)/multiplier_install" >> $GITHUB_ENV

          mkdir qt_multiplier_install
          echo "QT_MULTIPLIER_INSTALL_DIRECTORY=$(pwd)/qt_multiplier_install" >> $GITHUB_ENV

      - name: Determine job count
        id: job_count
        run: |
          if [[ "$OSTYPE" == "darwin"* ]]; then
            echo "VALUE=$(sysctl -n hw.ncpu)" >> $GITHUB_OUTPUT
          else
            echo "VALUE=$(nproc)" >> $GITHUB_OUTPUT
          fi

      - name: Select triplet
        id: triplet
        run: |
          if [[ "$OSTYPE" == "darwin"* ]]; then
            echo "VALUE=x64-osx-rel" >> $GITHUB_OUTPUT
          else
            echo "VALUE=x64-linux-rel" >> $GITHUB_OUTPUT
          fi

      - name: Build weggli-native
        run: |
          cmake \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} \
            -DCMAKE_INSTALL_PREFIX="${MULTIPLIER_INSTALL_DIRECTORY}" \
            -DCMAKE_TOOLCHAIN_FILE="${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake" \
            -DCMAKE_C_COMPILER=$(which clang) \
            -DCMAKE_CXX_COMPILER=$(which clang++) \
            -S libraries/vendored/weggli-native \
            -B build_vendored/weggli-native

          cmake \
            --build build_vendored/weggli-native \
            -j ${{ steps.job_count.outputs.VALUE }} \
            --target install

      - name: Build pasta
        run: |
          cmake \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} \
            -DCMAKE_INSTALL_PREFIX="${MULTIPLIER_INSTALL_DIRECTORY}" \
            -DCMAKE_TOOLCHAIN_FILE="${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake" \
            -DVCPKG_TARGET_TRIPLET=${{ steps.triplet.outputs.VALUE }} \
            -DVCPKG_HOST_TRIPLET=${{ steps.triplet.outputs.VALUE }} \
            -DPASTA_BOOTSTRAP_MACROS=OFF \
            -DPASTA_BOOTSTRAP_TYPES=OFF \
            -DPASTA_ENABLE_INSTALL=ON \
            -DPASTA_ENABLE_TESTING=OFF \
            -DPASTA_ENABLE_PY_BINDINGS=OFF \
            -S libraries/vendored/pasta \
            -B build_vendored/pasta

          cmake \
            --build build_vendored/pasta \
            -j ${{ steps.job_count.outputs.VALUE }} \
            --target install

      - name: Build gap
        run: |
          cmake \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} \
            -DCMAKE_INSTALL_PREFIX="${MULTIPLIER_INSTALL_DIRECTORY}" \
            -DVCPKG_ROOT="${VCPKG_ROOT}" \
            -DVCPKG_MANIFEST_MODE=OFF \
            -DCMAKE_C_COMPILER=$(which clang) \
            -DCMAKE_CXX_COMPILER=$(which clang++) \
            -DCMAKE_MAKE_PROGRAM=$(which make) \
            -DGAP_WARNINGS_AS_ERRORS=OFF \
            -DGAP_ENABLE_TESTING=OFF \
            -DGAP_ENABLE_EXAMPLES=OFF \
            -DGAP_ENABLE_COROUTINES=ON \
            -S libraries/vendored/gap \
            -B build_vendored/gap

          cmake \
            --build build_vendored/gap \
            -j ${{ steps.job_count.outputs.VALUE }} \
            --target install

      - name: Build multiplier
        run: |
          cmake \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} \
            -DCMAKE_INSTALL_PREFIX="${MULTIPLIER_INSTALL_DIRECTORY}" \
            -DCMAKE_TOOLCHAIN_FILE="${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake" \
            -DVCPKG_TARGET_TRIPLET=${{ steps.triplet.outputs.VALUE }} \
            -DVCPKG_HOST_TRIPLET=${{ steps.triplet.outputs.VALUE }} \
            -DCMAKE_C_COMPILER=$(which clang) \
            -DCMAKE_CXX_COMPILER=$(which clang++) \
            -DMX_ENABLE_BOOTSTRAP=OFF \
            -DMX_ENABLE_WEGGLI=ON \
            -DMX_ENABLE_RE2=ON \
            -DMX_ENABLE_VAST=OFF \
            -DMX_ENABLE_INSTALL=ON \
            -S libraries/vendored/multiplier \
            -B build_vendored/multiplier

          cmake \
            --build build_vendored/multiplier \
            -j ${{ steps.job_count.outputs.VALUE }} \
            --target install

      - name: Build qt-multiplier
        run: |
          cmake \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} \
            -DCMAKE_TOOLCHAIN_FILE="${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake" \
            -DVCPKG_TARGET_TRIPLET=${{ steps.triplet.outputs.VALUE }} \
            -DVCPKG_HOST_TRIPLET=${{ steps.triplet.outputs.VALUE }} \
            -DCMAKE_C_COMPILER=$(which clang) \
            -DCMAKE_CXX_COMPILER=$(which clang++) \
            -DMXQT_ENABLE_TESTS=true \
            -DCMAKE_PREFIX_PATH="${MULTIPLIER_INSTALL_DIRECTORY}" \
            -S . \
            -B build_qtmultiplier

          cmake \
            --build build_qtmultiplier \
            -j ${{ steps.job_count.outputs.VALUE }}

          export DESTDIR="${QT_MULTIPLIER_INSTALL_DIRECTORY}"

          cmake \
            --build build_qtmultiplier \
            --target install

      - name: Run the qt-multiplier tests
        run: |
          cmake \
            --build build_qtmultiplier \
            --target test

      - name: Create the DMG package
        if: inputs.platform == 'macos-12'
        id: dmg_package
        run: |
          cmake \
            -S package \
            -B package-build \
            -DQT_MULTIPLIER_DATA_PATH="${QT_MULTIPLIER_INSTALL_DIRECTORY}" \
            -DMULTIPLIER_DATA_PATH="${MULTIPLIER_INSTALL_DIRECTORY}" \
            -DCPACK_GENERATOR=DragNDrop

          cmake \
            --build package-build \
            --target package

          rel_package_path="$(ls package-build/*.dmg)"
          package_name="$(basename ${rel_package_path})"

          echo "PATH=${rel_package_path}" >> $GITHUB_OUTPUT
          echo "NAME=${package_name}" >> $GITHUB_OUTPUT

      - name: Upload the DMG package
        if: inputs.platform == 'macos-12'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.dmg_package.outputs.NAME }}
          path: ${{ steps.dmg_package.outputs.PATH }}

      - name: Create the DEB package
        if: inputs.platform == 'ubuntu-22.04'
        id: deb_package
        run: |
          cmake \
            -S package \
            -B package-build \
            -DQT_MULTIPLIER_DATA_PATH="${QT_MULTIPLIER_INSTALL_DIRECTORY}" \
            -DMULTIPLIER_DATA_PATH="${MULTIPLIER_INSTALL_DIRECTORY}" \
            -DCPACK_GENERATOR=DEB

          cmake \
            --build package-build \
            --target package

          rel_package_path="$(ls package-build/*.deb)"
          package_name="$(basename ${rel_package_path})"

          echo "PATH=${rel_package_path}" >> $GITHUB_OUTPUT
          echo "NAME=${package_name}" >> $GITHUB_OUTPUT

      - name: Upload the DEB package
        if: inputs.platform == 'ubuntu-22.04'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.deb_package.outputs.NAME }}
          path: ${{ steps.deb_package.outputs.PATH }}

      - name: Generate the sample database file
        run: |
          git clone "https://github.com/iovisor/ubpf"
          ( cd ubpf && git checkout -b sample_branch 0262957 )

          cmake \
            -S ubpf \
            -B build_ubpf \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=true

          "${MULTIPLIER_INSTALL_DIRECTORY}/bin/mx-index" \
            --target "build_ubpf/compile_commands.json" \
            --db /tmp/iovisor_ubpf.mx

          mv \
            /tmp/iovisor_ubpf.mx \
            .

      - name: Upload the sample database
        uses: actions/upload-artifact@v3
        with:
          name: iovisor_ubpf.mx
          path: iovisor_ubpf.mx
