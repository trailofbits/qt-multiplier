#
# Copyright (c) 2023-present, Trail of Bits, Inc.
# All rights reserved.
#
# This source code is licensed in accordance with the terms specified in
# the LICENSE file found in the root directory of this source tree.
#

name: Posix

on:
  workflow_call:
    inputs:
      platform:
        required: true
        type: string

      build_type:
        required: true
        type: string

      cxx_common_tag:
        required: true
        type: string

jobs:
  build:
    runs-on: ${{ inputs.platform }}

    env:
      CACHE_KEY: platform-${{ inputs.platform }}_type-${{ inputs.build_type }}_cxxcommon-${{ inputs.cxx_common_tag }}

    steps:
      - name: Clone the source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Initialize the submodules
        run: |
          eval $(ssh-agent -s)
          ssh-add - <<< '${{ secrets.MX_MULTIPLIER_DEPLOY_KEY }}'

          git submodule update --init --recursive

      - name: Set the CCACHE_DIR environment variable
        run: |
          echo "CCACHE_DIR=${{ github.workspace }}/ccache" >> $GITHUB_ENV

      - name: Update the ccache cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache_${{ env.CACHE_KEY }}-${{ github.sha }}
          restore-keys: ccache_${{ env.CACHE_KEY }}

      - name: Create the ccache folder
        run: |
          mkdir -p \
            "${CCACHE_DIR}"

      - name: Install cxx-common
        run: |
          folder_name="vcpkg_macos-11_llvm-15-pasta_xcode-13.0_amd64"
          archive_name="${folder_name}.tar.xz"
          cxx_common_url="https://github.com/lifting-bits/cxx-common/releases/download/${{ inputs.cxx_common_tag }}/${archive_name}"

          curl \
            -L \
            "${cxx_common_url}" \
            -o \
            "${archive_name}"

          tar xf \
            "${archive_name}"

          rm "${archive_name}"

          echo "VCPKG_ROOT=$(pwd)/${folder_name}" >> $GITHUB_ENV

      - name: Install system dependencies
        run: |
          if [[ "$OSTYPE" == "darwin"* ]]; then
            sudo chown -R $(whoami) $(brew --prefix)/*

            brew install \
              ccache \
              cmake \
              flex \
              bison \
              qt@6

            brew unlink qt@6
            brew link qt@6

          else
            echo "Platform is not yet supported"
            exit 1
          fi

      - name: Setup the build folders for the vendored libraries
        run: |
          mkdir build_vendored

          mkdir install
          echo "INSTALL_DIRECTORY=$(pwd)/install" >> $GITHUB_ENV

      - name: Build weggli-native
        run: |
          cmake \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} \
            -DCMAKE_INSTALL_PREFIX="${INSTALL_DIRECTORY}" \
            -DCMAKE_TOOLCHAIN_FILE="${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake" \
            -DVCPKG_TARGET_TRIPLET=x64-osx-rel \
            -DVCPKG_HOST_TRIPLET=x64-osx-rel \
            -DCMAKE_C_COMPILER=$(which clang) \
            -DCMAKE_CXX_COMPILER=$(which clang++) \
            -S libraries/vendored/weggli-native \
            -B build_vendored/weggli-native

          cmake \
            --build build_vendored/weggli-native \
            -j $(sysctl -n hw.ncpu) \
            --target install

      - name: Build pasta
        run: |
          cmake \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} \
            -DCMAKE_INSTALL_PREFIX="${INSTALL_DIRECTORY}" \
            -DCMAKE_TOOLCHAIN_FILE="${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake" \
            -DVCPKG_TARGET_TRIPLET=x64-osx-rel \
            -DVCPKG_HOST_TRIPLET=x64-osx-rel \
            -DPASTA_BOOTSTRAP_MACROS=OFF \
            -DPASTA_BOOTSTRAP_TYPES=OFF \
            -DPASTA_ENABLE_INSTALL=ON \
            -DPASTA_ENABLE_TESTING=OFF \
            -S libraries/vendored/pasta \
            -B build_vendored/pasta

          cmake \
            --build build_vendored/pasta \
            -j $(sysctl -n hw.ncpu) \
            --target install

      - name: Build gap
        run: |
          cmake \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} \
            -DCMAKE_INSTALL_PREFIX="${INSTALL_DIRECTORY}" \
            -DVCPKG_ROOT="${VCPKG_ROOT}" \
            -DVCPKG_MANIFEST_MODE=OFF \
            -DCMAKE_C_COMPILER=$(which clang) \
            -DCMAKE_CXX_COMPILER=$(which clang++) \
            -DCMAKE_MAKE_PROGRAM=$(which make) \
            -DGAP_WARNINGS_AS_ERRORS=OFF \
            -DGAP_ENABLE_TESTING=OFF \
            -DGAP_ENABLE_EXAMPLES=OFF \
            -DGAP_ENABLE_COROUTINES=ON \
            -S libraries/vendored/gap \
            -B build_vendored/gap

          cmake \
            --build build_vendored/gap \
            -j $(sysctl -n hw.ncpu) \
            --target install

      - name: Build multiplier
        run: |
          cmake \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} \
            -DCMAKE_INSTALL_PREFIX="${INSTALL_DIRECTORY}" \
            -DCMAKE_TOOLCHAIN_FILE="${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake" \
            -DVCPKG_TARGET_TRIPLET=x64-osx-rel \
            -DVCPKG_HOST_TRIPLET=x64-osx-rel \
            -DCMAKE_C_COMPILER=$(which clang) \
            -DCMAKE_CXX_COMPILER=$(which clang++) \
            -DMX_ENABLE_BOOTSTRAP=OFF \
            -DMX_ENABLE_WEGGLI=ON \
            -DMX_ENABLE_RE2=ON \
            -DMX_ENABLE_VAST=OFF \
            -DMX_ENABLE_INSTALL=ON \
            -S libraries/vendored/multiplier \
            -B build_vendored/multiplier

          cmake \
            --build build_vendored/multiplier \
            -j $(sysctl -n hw.ncpu) \
            --target install

      - name: Build qt-multiplier
        run: |
          cmake \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} \
            -DCMAKE_INSTALL_PREFIX="${INSTALL_DIRECTORY}" \
            -DCMAKE_TOOLCHAIN_FILE="${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake" \
            -DVCPKG_TARGET_TRIPLET=x64-osx-rel \
            -DVCPKG_HOST_TRIPLET=x64-osx-rel \
            -DCMAKE_C_COMPILER=$(which clang) \
            -DCMAKE_CXX_COMPILER=$(which clang++) \
            -S . \
            -B build_qtmultiplier

          cmake \
            --build build_qtmultiplier \
            -j $(sysctl -n hw.ncpu)

      - name: Generate the sample database file
        run: |
          git clone "https://github.com/iovisor/ubpf"
          ( cd ubpf && git checkout -b sample_branch 0262957 )

          cmake \
            -S ubpf \
            -B build_ubpf \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=true

          "${INSTALL_DIRECTORY}/bin/mx-index" \
            --target "build_ubpf/compile_commands.json" \
            --db /tmp/iovisor_ubpf.mx

          mv \
            /tmp/iovisor_ubpf.mx \
            .

      - name: Create the .tar.gz package
        run: |
          cd "build_qtmultiplier/multiplier"
          tar pcvzf Multiplier.app.tar.gz Multiplier.app

      - name: Upload the .tar.gz package
        uses: actions/upload-artifact@v3
        with:
          name: Multiplier.app.tar.gz
          path: "build_qtmultiplier/multiplier/Multiplier.app.tar.gz"

      - name: Package the sample database
        run: |
          zip \
            -r9 \
            iovisor_ubpf.mx.zip \
            iovisor_ubpf.mx

      - name: Upload the sample database
        uses: actions/upload-artifact@v3
        with:
          name: iovisor_ubpf.mx.zip
          path: "iovisor_ubpf.mx.zip"
